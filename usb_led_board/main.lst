C51 COMPILER V7.08   MAIN                         12/13/2015 17:06:23 PAGE 1   


C51 COMPILER V7.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\main.c INCDIR(include) DEBU
                    -G OBJECTEXTEND PRINT(.\main.lst) PAGEWIDTH(79) PAGELENGTH(66) OBJECT(main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.h"
   3          #include "delay.h"
   4          #include "soft_uart.h"
   5          #include "ir.h"
   6          #include "key_code.h"
   7          
   8          
   9          #define SLEEP_TIMEOUT           50000
  10          
  11          #define SET_LED_STATE(led, state)       do {led = !state;} while 
             -(0)
  12          
  13          
  14          static bit led_on = TRUE;
  15          static bit color_led_on = FALSE;
  16          
  17          
  18          void gpio_init(void)
  19          {
  20   1          GPIO_InitTypeDef t_gpio_type;
  21   1      
  22   1          t_gpio_type.Mode = GPIO_HighZ;
  23   1          t_gpio_type.Pin = GPIO_Pin_0;       // UART RXD
  24   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  25   1      
  26   1          t_gpio_type.Mode = GPIO_PullUp;
  27   1          t_gpio_type.Pin = GPIO_Pin_1;       // UART TXD
  28   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  29   1      
  30   1          t_gpio_type.Mode = GPIO_PullUp;
  31   1          t_gpio_type.Pin = GPIO_Pin_2;       // white LED
  32   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  33   1          SET_LED_STATE(WHITE_LED, led_on);
  34   1      
  35   1          t_gpio_type.Mode = GPIO_PullUp;
  36   1          t_gpio_type.Pin = GPIO_Pin_3;       // Color LED
  37   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  38   1          SET_LED_STATE(COLOR_LED, color_led_on);
  39   1      
  40   1          t_gpio_type.Mode = GPIO_PullUp;
  41   1          t_gpio_type.Pin = GPIO_Pin_4;       // IR send
  42   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  43   1          IR_SEND = 1;
  44   1      
  45   1          t_gpio_type.Mode = GPIO_HighZ;
  46   1          t_gpio_type.Pin = GPIO_Pin_5;       // IR rev
  47   1          GPIO_Inilize(GPIO_P3, &t_gpio_type);
  48   1      }
  49          
  50          #if 0
              void slow_led(bit on, unsigned int sec)
              {
                  unsigned int i, cnt, m;
              #define INTER_MS        600
                  m = sec * 600;
C51 COMPILER V7.08   MAIN                         12/13/2015 17:06:23 PAGE 2   

              
                  WHITE_LED = on;
                  for (i=0; i<m; i++) {
                      cnt = i;
                      WHITE_LED = !WHITE_LED;
                      while (cnt--);
              
                      cnt = m - i;
                      WHITE_LED = !WHITE_LED;
                      while (cnt--);
                  }
                  WHITE_LED = !on;
              }
              
              void breath_led(void)
              {
                  while (1) {
                      slow_led(1, 2);
                      slow_led(0, 2);
                  }
              }
              #endif
  78          
  79          static void send_key_to_android(enum key_code key_code)
  80          {
  81   1          print_str("\n\r");
  82   1          print_str("input keyevent ");
  83   1          print_dec(key_code);
  84   1          print_str("\n\r");
  85   1      }
  86          
  87          static enum key_code check_key(unsigned char *key)
  88          {
  89   1          unsigned char size = sizeof(key_map) / sizeof(key_map[0]);
  90   1          unsigned char i;
  91   1          unsigned long key_val;
  92   1      
  93   1          key_val = ((unsigned long)key[0] << 24) |
  94   1                    ((unsigned long)key[1] << 16) |
  95   1                    ((unsigned long)key[2] << 8) |
  96   1                    ((unsigned long)key[3]);
  97   1      
  98   1          for (i=0; i<size; i++) {
  99   2              if (key_val == key_map[i].ir_code) {
 100   3                  return key_map[i].key_code;
 101   3              }
 102   2          }
 103   1      
 104   1          return KEYCODE_UNKNOWN;
 105   1      }
 106          
 107          
 108          static void handle_key(enum key_code key_code)
 109          {
 110   1          switch (key_code) {
 111   2          case KEYCODE_LED_ON:
 112   2              led_on = TRUE;
 113   2              break;
 114   2          case KEYCODE_LED_OFF:
 115   2              led_on = FALSE;
 116   2              break;
 117   2          case KEYCODE_LED_REV:
 118   2              led_on = !led_on;
 119   2              break;
C51 COMPILER V7.08   MAIN                         12/13/2015 17:06:23 PAGE 3   

 120   2          case KEYCODE_COLOR_REV:
 121   2              color_led_on = !color_led_on;
 122   2              break;
 123   2          case KEYCODE_UNKNOWN:
 124   2              break;
 125   2          default:
 126   2              send_key_to_android(key_code);
 127   2              break;
 128   2          }
 129   1      
 130   1          SET_LED_STATE(WHITE_LED, led_on);
 131   1          SET_LED_STATE(COLOR_LED, color_led_on);
 132   1      }
 133          
 134          unsigned char Ir_Buf[4];
 135          unsigned int loop_cnt = 0;
 136          
 137          
 138          main()
 139          {
 140   1          EA = 1;
 141   1          SYSTEM_CLK_1T();
 142   1          gpio_init();
 143   1          ir_rcv_init();
 144   1      
 145   1          while (1) {
 146   2      #if 0
                      if (ir_loop_cnt++ > 5000) {
                          ir_loop_cnt = 0;
                          if (check_ir_loop()) {
                              slow_led(1, 4);
                              delay_ms(30000);
                              slow_led(0, 4);
                          }
                      }
              #endif
 156   2              if (loop_cnt++ > SLEEP_TIMEOUT) {
 157   3                  //MCU_IDLE();
 158   3                  SYSTEM_CLK_128T();
 159   3              }
 160   2      
 161   2              if (ir_rcv(Ir_Buf)) {
 162   3                  print_str("rcv key: 0x");
 163   3                  print_hex(Ir_Buf[0]);
 164   3                  print_hex(Ir_Buf[1]);
 165   3                  print_hex(Ir_Buf[2]);
 166   3                  print_hex(Ir_Buf[3]);
 167   3                  print_str("\n\r");
 168   3      
 169   3                  handle_key(check_key(Ir_Buf));
 170   3                  loop_cnt = 0;
 171   3              }
 172   2          }
 173   1      }
 174          
 175          
 176          
 177          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    516    ----
   CONSTANT SIZE    =    121    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V7.08   MAIN                         12/13/2015 17:06:23 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
