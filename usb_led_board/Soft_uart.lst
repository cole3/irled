C51 COMPILER V7.08   SOFT_UART                    12/06/2015 11:38:20 PAGE 1   


C51 COMPILER V7.08, COMPILATION OF MODULE SOFT_UART
OBJECT MODULE PLACED IN source\Soft_uart.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\Soft_uart.c INCDIR(include)
                    - DEBUG OBJECTEXTEND PRINT(.\Soft_uart.lst) PAGEWIDTH(79) PAGELENGTH(66) SRC(.\S
                    -oft_uart.SRC)

line level    source

   1          
   2          /*************  功能说明        **************
   3          
   4          本文件为模拟串口发送程序, 一般为测试监控用.
   5          
   6          串口参数:9600,8,n,1.
   7          
   8          可以根据主时钟自动适应.
   9          
  10          ******************************************/
  11          
  12          #include        "soft_uart.h"
  13          #include        "timer.h"
  14          
  15          /****************************************************************
             -***********/
  16          
  17          
  18          #define BaudRate                115200          //模拟串口波特率
  19          
  20          
  21          static bit init;
  22          
  23          
  24          #if (BaudRate == 115200)
  25          #pragma asm
  26          RXB     BIT     P3.0
  27          TXB     BIT     P3.1
  28          #pragma endasm
  29          
  30          void uart_init(void)
  31          {
  32   1              init = 1;
  33   1      }
  34          
  35          void uart_deinit(void)
  36          {
  37   1              init = 0;
  38   1      }
  39          
  40          bit uart_send(unsigned char dat)
  41          {
  42   1      #pragma asm
  43   1              PUSH    ACC
  44   1              MOV     ACC,    R0
  45   1              PUSH    ACC
  46   1              MOV     ACC,    R1
  47   1              PUSH    ACC
  48   1      
  49   1              MOV     ACC,    R7
  50   1              MOV     R1,     #8
  51   1      
  52   1              // 115200 baud rate = 96 clock
  53   1              // send start bit
  54   1              CLR     TXB             // 4
C51 COMPILER V7.08   SOFT_UART                    12/06/2015 11:38:20 PAGE 2   

  55   1              MOV     R0,     #22     // 2
  56   1              DJNZ    R0,     $       // 4 * 22 = 88
  57   1              NOP
  58   1              NOP
  59   1      
  60   1              // send byte
  61   1      L1:     RRC     A               // 1
  62   1              MOV     TXB,     C      // 4
  63   1              MOV     R0,     #21     // 2
  64   1              NOP                     // 1
  65   1              DJNZ    R0,     $       // 4 * 21 = 84
  66   1              DJNZ    R1,     L1      // 4
  67   1      
  68   1              // send stop bit
  69   1              SETB    TXB             // 4
  70   1              MOV     R0,     #22     // 2
  71   1              DJNZ    R0,     $       // 4 * 22 = 88
  72   1              NOP
  73   1              NOP
  74   1      
  75   1              MOV     R0,     #0FFH
  76   1              DJNZ    R0,     $
  77   1      
  78   1              POP     ACC
  79   1              MOV     R1,     ACC
  80   1              POP     ACC
  81   1              MOV     R0,     ACC
  82   1              POP     ACC
  83   1      #pragma endasm
  84   1      
  85   1              return 1;
  86   1      }
*** WARNING C280 IN LINE 40 OF SOURCE\SOFT_UART.C: 'dat': unreferenced local va
             -riable
  87          
  88          #else
              #define Timer0_Reload   (65536 - MAIN_Fosc / BaudRate / 3)
              #define D_RxBitLenth    9               //9: 8 + 1 stop
              #define D_TxBitLenth    9               //9: 1 stop bit
              
              sbit RXB = P3^0;                //define UART TX/RX port
              sbit TXB = P3^1;
              
              static unsigned char TBUF,RBUF;
              static unsigned char TCNT,RCNT; //发送和接收检测 计数器(3倍速率检
             -测)
              static unsigned char TBIT,RBIT; //发送和接收的数据计数器
              static unsigned char rcv_cnt, get_cnt;
              static unsigned char buf[16];
              
              static bit TING,RING;   //正在发送或接收一个字节
              
              #define RxBitLenth      9       //8个数据位+1个停止位
              #define TxBitLenth      9       //8个数据位+1个停止位
              
              
              bit uart_rev(unsigned char *dat)
              {
                      if (!init)
                      {
                              return 0;
                      }
                      if (get_cnt != rcv_cnt)
                      {
C51 COMPILER V7.08   SOFT_UART                    12/06/2015 11:38:20 PAGE 3   

                              *dat = buf[get_cnt++ & 0x0f];
                              return 1;
                      }
                      return 0;
              }
              
              bit uart_send(unsigned char dat)
              {
                      if (!init)
                      {
                              return 0;
                      }
                      while (TING);
                      TBUF = dat;
                      TING = 1;
                      return 1;
              }
              
              void uart_isr(void)
              {
                      if (RING)
                      {
                              if (--RCNT == 0)                                  //接收数据以定时器的1/3来接收
                              {
                                      RCNT = 3;                   //重置接收计数器  接收数据以定时器
             -的1/3来接收        reset send baudrate counter
                                      if (--RBIT == 0)                          //接收完一帧数据
                                      {
                                              RING = 0;               //停止接收                      stop receive
                                              buf[rcv_cnt++ & 0x0f] = RBUF;
                                      }
                                      else
                                      {
                                              RBUF >>= 1;                       //把接收的单b数据 暂存到 RDAT(接收缓冲)
                                              if (RXB) RBUF |= 0x80;  //shift RX data to RX buffer
                                      }
                              }
                      }
                      else if (!RXB)          //判断是不是开始位 RXB=0;
                      {
                              RING = 1;       //如果是则设置开始接收标志位    set start receive
             - flag
                              RCNT = 4;       //初始化接收波特率计数器        initial receive
             - baudrate counter
                              RBIT = RxBitLenth;       //初始化接收的数据位数(8个数据位+1个停
             -止位)    initial receive bit number (8 data bits + 1 stop bit)
                      }
              
                      if (TING)                       //发送开始标志位   judge whether sending
                      {
                              if (--TCNT == 0)                        //发送数据以定时器的1/3来发送
                              {
                                      TCNT = 3;                               //重置发送计数器   reset send baudrate counter
                                      if (TBIT == 0)                  //发送计数器为0 表明单字节发送还没开始
                                      {
                                              TXB = 0;                        //发送开始位                                            send start bit
                                              TBIT = TxBitLenth;      //发送数据位数 (8数据位+1停止位)        initial s
             -end bit number (8 data bits + 1 stop bit)
                                      }
                                      else                                    //发送计数器为非0 正在发送数据
                                      {
                                              if (--TBIT == 0)        //发送计数器减为0 表明单字节发送结束
                                              {
                                                      TXB = 1;                //送停止位数据
C51 COMPILER V7.08   SOFT_UART                    12/06/2015 11:38:20 PAGE 4   

                                                      TING = 0;               //发送停止位                            stop send
                                              }
                                              else
                                              {
                                                      TBUF >>= 1;             //把最低位送到 CY(益处标志位) shift data to CY
                                                      TXB = CY;               //发送单b数据                           write CY to TX port
                                              }
                                      }
                              }
                      }
              }
              
              void uart_init(void)
              {
                      TIM_InitTypeDef tim_type;
              
                  if (init) {
                      return;
                  }
              
                      tim_type.TIM_Mode = TIM_16BitAutoReload;
                      tim_type.TIM_Polity = 1;
                      tim_type.TIM_Interrupt = ENABLE;
                      tim_type.TIM_ClkSource = TIM_CLOCK_1T;
                      tim_type.TIM_ClkOut = DISABLE;
                      tim_type.TIM_Value = Timer0_Reload;
                      tim_type.TIM_Run = ENABLE;
                      tim_type.TIM_Isr = uart_isr;
                      Timer_Inilize(Timer0, &tim_type);
              
                      TING = 0;
                      RING = 0;
                      TCNT = 3;
                      RCNT = 0;
                      init = 1;
              }
              
              void uart_deinit(void)
              {
                      init = 0;
                      while (TING);
                      Timer0_Stop();
                      Timer0_InterruptDisable();
              }
              #endif
 220          
 221          
 222          void print_str(unsigned char code *str)
 223          {
 224   1          bit state = init;
 225   1      
 226   1          uart_init();
 227   1      
 228   1              while (*str) {
 229   2                      uart_send(*str++);
 230   2              }
 231   1      
 232   1          if (!state) {
 233   2              uart_deinit();
 234   2          }
 235   1      }
 236          
 237          #define HEX2CHAR(h)     ((h >= 10) ? (h - 10 + 'A'): (h + '0'))
 238          #define DEC2CHAR(d)     (d + '0')
C51 COMPILER V7.08   SOFT_UART                    12/06/2015 11:38:20 PAGE 5   

 239          
 240          
 241          void print_hex(unsigned char hex)
 242          {
 243   1          bit state = init;
 244   1      
 245   1          uart_init();
 246   1      
 247   1              uart_send(HEX2CHAR(hex / 16));
 248   1              uart_send(HEX2CHAR(hex % 16));
 249   1      
 250   1          if (!state) {
 251   2              uart_deinit();
 252   2          }
 253   1      }
 254          
 255          void print_dec(unsigned char dec)
 256          {
 257   1          bit state = init;
 258   1      
 259   1          uart_init();
 260   1      
 261   1              uart_send(DEC2CHAR(dec / 100));
 262   1              uart_send(DEC2CHAR(dec / 10 % 10));
 263   1              uart_send(DEC2CHAR(dec % 10));
 264   1      
 265   1          if (!state) {
 266   2              uart_deinit();
 267   2          }
 268   1      }
 269          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
