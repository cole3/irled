; .\ir.SRC generated from: source\ir.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE source\ir.c INCDIR(include) DEBUG OBJECTEXTEND PRINT(.\ir.lst) PAGEWIDTH(79) PAGELENGTH(66) SRC(.\ir.SRC)

$NOMOD51

NAME	IR

CCF2	BIT	0D8H.2
ACC7	BIT	0E0H.7
P0M1	DATA	093H
P1M0	DATA	092H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
WKTCH	DATA	0ABH
T0	BIT	0B0H.4
AC	BIT	0D0H.6
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
CLKOUT0	BIT	0B0H.5
T1	BIT	0B0H.5
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
ISP_TRIG	DATA	0C6H
EA	BIT	0A8H.7
CLKOUT1	BIT	0B0H.4
SPI_SS_2	BIT	0A0H.4
P6	DATA	0E8H
P7M1	DATA	0E1H
SPI_SS_3	BIT	0C8H.4
SPI_MISO	BIT	090H.4
SPI_MOSI	BIT	090H.3
CCP0	BIT	090H.1
P7	DATA	0F8H
WKTCL	DATA	0AAH
CCP1	BIT	090H.0
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
CCP2	BIT	0B0H.7
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
EADC	BIT	0A8H.5
SPI_SCLK_2	BIT	0A0H.1
IE	DATA	0A8H
SPI_SCLK_3	BIT	0C0H.3
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
IPH2	DATA	0B6H
CR	BIT	0D8H.6
CCAP0L	DATA	0EAH
RD	BIT	0B0H.7
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
ES	BIT	0A8H.4
CCAPM2	DATA	0DCH
PADC	BIT	0B8H.5
SPI_MISO_2	BIT	0A0H.2
SPI_MOSI_2	BIT	0A0H.3
IP	DATA	0B8H
SPI_MISO_3	BIT	0C0H.1
SPI_MOSI_3	BIT	0C0H.0
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
CLK_DIV	DATA	097H
IAP_ADDRH	DATA	0C3H
RXD2	BIT	090H.0
ISP_CMD	DATA	0C5H
PS	BIT	0B8H.4
TXD2	BIT	090H.1
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
PPCA	BIT	0B8H.7
OV	BIT	0D0H.2
WR	BIT	0B0H.6
ELVD	BIT	0A8H.6
P00	BIT	080H.0
P10	BIT	090H.0
P01	BIT	080H.1
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
PCON	DATA	087H
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
ISP_ADDRH	DATA	0C3H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
SCON	DATA	098H
WAKE_CLKO	DATA	08FH
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
P05	BIT	080H.5
TMOD	DATA	089H
TCON	DATA	088H
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
ISP_ADDRL	DATA	0C4H
PLVD	BIT	0B8H.6
P52	BIT	0C8H.2
P43	BIT	0C0H.3
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P57	BIT	0C8H.7
IE0	BIT	088H.1
BUS_SPEED	DATA	0A1H
IE1	BIT	088H.3
IE2	DATA	0AFH
B	DATA	0F0H
AUXR	DATA	08EH
IAP_CONTR	DATA	0C7H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
TF1	BIT	088H.7
IP2	DATA	0B5H
RL_TH0	DATA	08CH
RB8	BIT	098H.2
RL_TH1	DATA	08DH
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
RL_T2H	DATA	0D6H
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
RL_T3H	DATA	0D4H
TH2	DATA	0D6H
T2H	DATA	0D6H
P	BIT	0D0H.0
RL_T4H	DATA	0D2H
TH3	DATA	0D4H
T3H	DATA	0D4H
RL_TL0	DATA	08AH
SM0	BIT	098H.7
TH4	DATA	0D2H
T4H	DATA	0D2H
RL_TL1	DATA	08BH
TL0	DATA	08AH
SM1	BIT	098H.6
RL_T2L	DATA	0D7H
TL1	DATA	08BH
SM2	BIT	098H.5
RL_T3L	DATA	0D5H
TL2	DATA	0D7H
T2L	DATA	0D7H
RL_T4L	DATA	0D3H
TL3	DATA	0D5H
T3L	DATA	0D5H
PT0	BIT	0B8H.1
TL4	DATA	0D3H
T4L	DATA	0D3H
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
ISP_CONTR	DATA	0C7H
TR0	BIT	088H.4
RS1	BIT	0D0H.4
IAP_DATA	DATA	0C2H
TR1	BIT	088H.6
PX0	BIT	0B8H.0
WDT_CONTR	DATA	0C1H
PX1	BIT	0B8H.2
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
P1ASF	DATA	09DH
DPH	DATA	083H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
IPH	DATA	0B7H
S2BUF	DATA	09BH
PCON2	DATA	097H
S3BUF	DATA	0ADH
REN	BIT	098H.4
S4BUF	DATA	085H
S2CON	DATA	09AH
S3CON	DATA	0ACH
ISP_DATA	DATA	0C2H
S4CON	DATA	084H
SADEN	DATA	0B9H
RXD	BIT	0B0H.0
SADDR	DATA	0A9H
TXD	BIT	0B0H.1
B0	BIT	0F0H.0
B1	BIT	0F0H.1
IAP_TRIG	DATA	0C6H
AUXR1	DATA	0A2H
B2	BIT	0F0H.2
SPI_SS	BIT	090H.2
AUXR2	DATA	08FH
B3	BIT	0F0H.3
B4	BIT	0F0H.4
F0	BIT	0D0H.5
B5	BIT	0F0H.5
F1	BIT	0D0H.1
INT_CLKO	DATA	08FH
B6	BIT	0F0H.6
ACC0	BIT	0E0H.0
B7	BIT	0F0H.7
ACC1	BIT	0E0H.1
ACC2	BIT	0E0H.2
ACC3	BIT	0E0H.3
PSW	DATA	0D0H
ACC4	BIT	0E0H.4
SPI_SCLK	BIT	090H.5
CCF0	BIT	0D8H.0
ACC5	BIT	0E0H.5
CCF1	BIT	0D8H.1
ACC6	BIT	0E0H.6
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?ir_rcv_isr?IR    SEGMENT CODE 
?PR?ir_rcv_t0_timer_cfg?IR               SEGMENT CODE 
?DT?ir_rcv_t0_timer_cfg?IR               SEGMENT DATA OVERLAYABLE 
?PR?ir_rcv_t1_timer_cfg?IR               SEGMENT CODE 
?DT?ir_rcv_t1_timer_cfg?IR               SEGMENT DATA OVERLAYABLE 
?BI?ir_rcv_t1_timer_cfg?IR               SEGMENT BIT OVERLAYABLE 
?PR?Ir_Get_Low?IR    SEGMENT CODE 
?PR?Ir_Get_High?IR   SEGMENT CODE 
?PR?_nec_decode?IR   SEGMENT CODE 
?DT?_nec_decode?IR   SEGMENT DATA OVERLAYABLE 
?PR?_ir_rcv?IR       SEGMENT CODE 
?DT?_ir_rcv?IR       SEGMENT DATA OVERLAYABLE 
?BI?_ir_rcv?IR       SEGMENT BIT OVERLAYABLE 
?PR?ir_rcv_init?IR   SEGMENT CODE 
?PR?ir_rcv_deinit?IR SEGMENT CODE 
?PR?ir_send_isr?IR   SEGMENT CODE 
?PR?ir_send_t0_timer_cfg?IR              SEGMENT CODE 
?DT?ir_send_t0_timer_cfg?IR              SEGMENT DATA OVERLAYABLE 
?BI?ir_send_t0_timer_cfg?IR              SEGMENT BIT OVERLAYABLE 
?PR?_ir_send?IR      SEGMENT CODE 
?DT?_ir_send?IR      SEGMENT DATA OVERLAYABLE 
?PR?ir_send_init?IR  SEGMENT CODE 
?PR?ir_send_deinit?IR                    SEGMENT CODE 
?PR?check_ir_loop?IR SEGMENT CODE 
?DT?check_ir_loop?IR SEGMENT DATA OVERLAYABLE 
?C_INITSEG           SEGMENT CODE 
?DT?IR               SEGMENT DATA 
?BI?IR               SEGMENT BIT 
	EXTRN	CODE (_Timer_Inilize)
	EXTRN	CODE (_delay_ms)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C?CSTPTR)
	PUBLIC	check_ir_loop
	PUBLIC	ir_send_deinit
	PUBLIC	ir_send_init
	PUBLIC	_ir_send
	PUBLIC	?ir_send_t0_timer_cfg?BIT
	PUBLIC	ir_send_t0_timer_cfg
	PUBLIC	ir_send_isr
	PUBLIC	ir_rcv_deinit
	PUBLIC	ir_rcv_init
	PUBLIC	_ir_rcv
	PUBLIC	?ir_rcv_t1_timer_cfg?BIT
	PUBLIC	ir_rcv_t1_timer_cfg
	PUBLIC	ir_rcv_t0_timer_cfg
	PUBLIC	ir_rcv_isr

	RSEG  ?DT?ir_send_t0_timer_cfg?IR
?ir_send_t0_timer_cfg?BYTE:
  tim_type?1055:   DS   11

	RSEG  ?BI?ir_send_t0_timer_cfg?IR
?ir_send_t0_timer_cfg?BIT:
    enable?1054:   DBIT   1

	RSEG  ?DT?ir_rcv_t0_timer_cfg?IR
?ir_rcv_t0_timer_cfg?BYTE:
   tim_type?140:   DS   11

	RSEG  ?DT?ir_rcv_t1_timer_cfg?IR
?ir_rcv_t1_timer_cfg?BYTE:
   tim_type?242:   DS   11

	RSEG  ?BI?ir_rcv_t1_timer_cfg?IR
?ir_rcv_t1_timer_cfg?BIT:
     enable?241:   DBIT   1

	RSEG  ?DT?_ir_send?IR
?_ir_send?BYTE:
       key?1156:   DS   3

	RSEG  ?DT?check_ir_loop?IR
?check_ir_loop?BYTE:
         n?1457:   DS   1

	RSEG  ?DT?_nec_decode?IR
?_nec_decode?BYTE:
        key?545:   DS   3
	ORG  3
       temp?546:   DS   2
          j?548:   DS   1

	RSEG  ?DT?_ir_rcv?IR
?_ir_rcv?BYTE:
        key?649:   DS   3
	ORG  3
          i?652:   DS   1
          j?653:   DS   1

	RSEG  ?BI?_ir_rcv?IR
?_ir_rcv?BIT:
        ret?651:   DBIT   1

	RSEG  ?DT?IR
         ir_cnt:   DS   1

	RSEG  ?BI?IR
         ir_out:   DBIT   1
     ir_rcv_int:   DBIT   1

	RSEG  ?C_INITSEG
	DB	0C1H, ir_rcv_int + 000H	; bit-init

; /*
;  * ir
;  * using timer1 counter to invode interrupt because STC15F104E's ex int error.
;  * timer0 is used to calculate high/low level's time.
; */
; 
; #include "ir.h"
; #include "timer.h"
; #include "delay.h"
; #include "soft_uart.h"
; 
; 
; //#define CONFIG_RC3_CODE
; 
; #pragma asm
  IR_SEND      BIT     P3.4
; #pragma endasm
; 
; static bit ir_rcv_int = 0;
; 
; 
; void ir_rcv_isr(void)

	RSEG  ?PR?ir_rcv_isr?IR
ir_rcv_isr:
			; SOURCE LINE # 22
; {
			; SOURCE LINE # 23
;     Timer1_InterruptDisable();
			; SOURCE LINE # 24
	CLR  	ET1
;     ir_rcv_int = 1;
			; SOURCE LINE # 25
	SETB 	ir_rcv_int
; }
			; SOURCE LINE # 26
	RET  	
; END OF ir_rcv_isr

; 
; void ir_rcv_t0_timer_cfg(void)

	RSEG  ?PR?ir_rcv_t0_timer_cfg?IR
ir_rcv_t0_timer_cfg:
	USING	0
			; SOURCE LINE # 28
; {
			; SOURCE LINE # 29
;     TIM_InitTypeDef tim_type;
; 
;     tim_type.TIM_Mode = TIM_16BitAutoReload;
			; SOURCE LINE # 32
	CLR  	A
	MOV  	tim_type?140,A
;     tim_type.TIM_Polity = 1;
			; SOURCE LINE # 33
	MOV  	tim_type?140+01H,#01H
;     tim_type.TIM_Interrupt = DISABLE;
			; SOURCE LINE # 34
	MOV  	tim_type?140+02H,A
;     tim_type.TIM_ClkSource = TIM_CLOCK_12T;
			; SOURCE LINE # 35
	MOV  	tim_type?140+03H,#01H
;     tim_type.TIM_ClkOut = DISABLE;
			; SOURCE LINE # 36
	MOV  	tim_type?140+04H,A
;     tim_type.TIM_Value = 0;
			; SOURCE LINE # 37
	MOV  	tim_type?140+05H,A
	MOV  	tim_type?140+06H,A
;     tim_type.TIM_Run = DISABLE;
			; SOURCE LINE # 38
	MOV  	tim_type?140+07H,A
;     tim_type.TIM_Isr = 0;
			; SOURCE LINE # 39
	MOV  	tim_type?140+08H,A
	MOV  	tim_type?140+09H,A
	MOV  	tim_type?140+0AH,A
;     Timer_Inilize(Timer0, &tim_type);
			; SOURCE LINE # 40
	MOV  	R3,A
	MOV  	R2,#HIGH (tim_type?140)
	MOV  	R1,#LOW (tim_type?140)
	MOV  	R7,A
	LJMP 	_Timer_Inilize
; END OF ir_rcv_t0_timer_cfg

; }
; 
; void ir_rcv_t1_timer_cfg(bit enable)

	RSEG  ?PR?ir_rcv_t1_timer_cfg?IR
ir_rcv_t1_timer_cfg:
	USING	0
			; SOURCE LINE # 43
; {
			; SOURCE LINE # 44
;     TIM_InitTypeDef tim_type;
; 
;     tim_type.TIM_Mode = TIM_16BitAutoReload;
			; SOURCE LINE # 47
	CLR  	A
	MOV  	tim_type?242,A
;     tim_type.TIM_Polity = PolityLow;
			; SOURCE LINE # 48
	MOV  	tim_type?242+01H,A
;     tim_type.TIM_Interrupt = enable;
			; SOURCE LINE # 49
	MOV  	C,enable?241
	RLC  	A
	MOV  	R7,A
	MOV  	tim_type?242+02H,A
;     tim_type.TIM_ClkSource = TIM_CLOCK_Ext;
			; SOURCE LINE # 50
	MOV  	tim_type?242+03H,#02H
;     tim_type.TIM_ClkOut = DISABLE;
			; SOURCE LINE # 51
	CLR  	A
	MOV  	tim_type?242+04H,A
;     tim_type.TIM_Value = 0xFFFF;
			; SOURCE LINE # 52
	MOV  	A,#0FFH
	MOV  	tim_type?242+05H,A
	MOV  	tim_type?242+06H,A
;     tim_type.TIM_Run = enable;
			; SOURCE LINE # 53
	MOV  	tim_type?242+07H,R7
;     tim_type.TIM_Isr = ir_rcv_isr;
			; SOURCE LINE # 54
	MOV  	tim_type?242+08H,A
	MOV  	tim_type?242+09H,#HIGH (ir_rcv_isr)
	MOV  	tim_type?242+0AH,#LOW (ir_rcv_isr)
;     Timer_Inilize(Timer1, &tim_type);
			; SOURCE LINE # 55
	MOV  	R3,#00H
	MOV  	R2,#HIGH (tim_type?242)
	MOV  	R1,#LOW (tim_type?242)
	MOV  	R7,#01H
	LJMP 	_Timer_Inilize
; END OF ir_rcv_t1_timer_cfg

; }
; 
; static unsigned int Ir_Get_Low()

	RSEG  ?PR?Ir_Get_Low?IR
Ir_Get_Low:
	USING	0
			; SOURCE LINE # 58
; {
			; SOURCE LINE # 59
;     unsigned int t = 0;
			; SOURCE LINE # 60
;---- Variable 't?343' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
; 
;     TL0 = 0;
			; SOURCE LINE # 62
	MOV  	TL0,A
;     TH0 = 0;
			; SOURCE LINE # 63
	MOV  	TH0,A
;     TR0 = 1;
			; SOURCE LINE # 64
	SETB 	TR0
?C0004:
;     while (!IR_REV && !(TH0 & 0x80));
			; SOURCE LINE # 65
	JB   	P35,?C0005
	MOV  	A,TH0
	JNB  	ACC.7,?C0004
?C0005:
; 
;     TR0 = 0;
			; SOURCE LINE # 67
	CLR  	TR0
;     t = TH0;
			; SOURCE LINE # 68
	MOV  	R7,TH0
;     t <<= 8;
			; SOURCE LINE # 69
	MOV  	A,R7
	MOV  	R6,A
;     t |= TL0;
			; SOURCE LINE # 70
	MOV  	R5,TL0
	MOV  	A,R5
	MOV  	R7,A
; 
;     return t;
			; SOURCE LINE # 72
; }
			; SOURCE LINE # 73
?C0006:
	RET  	
; END OF Ir_Get_Low

; 
; static unsigned int Ir_Get_High()

	RSEG  ?PR?Ir_Get_High?IR
Ir_Get_High:
	USING	0
			; SOURCE LINE # 75
; {
			; SOURCE LINE # 76
;     unsigned int t = 0;
			; SOURCE LINE # 77
;---- Variable 't?444' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
; 
;     TL0 = 0;
			; SOURCE LINE # 79
	MOV  	TL0,A
;     TH0 = 0;
			; SOURCE LINE # 80
	MOV  	TH0,A
;     TR0 = 1;
			; SOURCE LINE # 81
	SETB 	TR0
?C0007:
;     while (IR_REV && !(TH0 & 0x80));
			; SOURCE LINE # 82
	JNB  	P35,?C0008
	MOV  	A,TH0
	JNB  	ACC.7,?C0007
?C0008:
; 
;     TR0 = 0;
			; SOURCE LINE # 84
	CLR  	TR0
;     t = TH0;
			; SOURCE LINE # 85
	MOV  	R7,TH0
;     t <<= 8;
			; SOURCE LINE # 86
	MOV  	A,R7
	MOV  	R6,A
;     t |= TL0;
			; SOURCE LINE # 87
	MOV  	R5,TL0
	MOV  	A,R5
	MOV  	R7,A
; 
;     return t;
			; SOURCE LINE # 89
; }
			; SOURCE LINE # 90
?C0009:
	RET  	
; END OF Ir_Get_High

; 
; static bit nec_decode(unsigned char *key)

	RSEG  ?PR?_nec_decode?IR
_nec_decode:
	USING	0
			; SOURCE LINE # 92
	MOV  	key?545,R3
	MOV  	key?545+01H,R2
	MOV  	key?545+02H,R1
; {
			; SOURCE LINE # 93
;     unsigned int temp;
;     char i,j;
; 
;     temp = Ir_Get_High();
			; SOURCE LINE # 97
	LCALL	Ir_Get_High
	MOV  	temp?546,R6
	MOV  	temp?546+01H,R7
;     if ((temp < 3686) || (temp > 4608)) {
			; SOURCE LINE # 98
	CLR  	C
	MOV  	A,temp?546+01H
	SUBB 	A,#066H
	MOV  	A,temp?546
	SUBB 	A,#0EH
	JC   	?C0011
	SETB 	C
	MOV  	A,temp?546+01H
	SUBB 	A,#00H
	MOV  	A,temp?546
	SUBB 	A,#012H
	JC   	?C0010
?C0011:
;         return 0;
			; SOURCE LINE # 99
	CLR  	C
	RET  	
;     }
			; SOURCE LINE # 100
?C0010:
; 
;     for (i=0; i<4; i++) {
			; SOURCE LINE # 102
;---- Variable 'i?547' assigned to Register 'R4' ----
	CLR  	A
	MOV  	R4,A
?C0013:
;         for (j=0; j<8; j++) {
			; SOURCE LINE # 103
	CLR  	A
	MOV  	j?548,A
?C0016:
;             temp = Ir_Get_Low();
			; SOURCE LINE # 104
	LCALL	Ir_Get_Low
	MOV  	temp?546,R6
	MOV  	temp?546+01H,R7
;             if ((temp < 184) || (temp > 737)) //200~800us
			; SOURCE LINE # 105
	CLR  	C
	MOV  	A,temp?546+01H
	SUBB 	A,#0B8H
	MOV  	A,temp?546
	SUBB 	A,#00H
	JC   	?C0020
	SETB 	C
	MOV  	A,temp?546+01H
	SUBB 	A,#0E1H
	MOV  	A,temp?546
	SUBB 	A,#02H
	JC   	?C0019
?C0020:
;                 return 0;
			; SOURCE LINE # 106
	CLR  	C
	RET  	
?C0019:
; 
;             temp = Ir_Get_High();
			; SOURCE LINE # 108
	LCALL	Ir_Get_High
	MOV  	temp?546,R6
	MOV  	temp?546+01H,R7
;             if ((temp < 184) || (temp > 1843)) //200~2000us
			; SOURCE LINE # 109
	CLR  	C
	MOV  	A,temp?546+01H
	SUBB 	A,#0B8H
	MOV  	A,temp?546
	SUBB 	A,#00H
	JC   	?C0022
	SETB 	C
	MOV  	A,temp?546+01H
	SUBB 	A,#033H
	MOV  	A,temp?546
	SUBB 	A,#07H
	JC   	?C0021
?C0022:
;                 return 0;
			; SOURCE LINE # 110
	CLR  	C
	RET  	
?C0021:
; 
;             key[i] >>= 1;
			; SOURCE LINE # 112
	MOV  	R3,key?545
	MOV  	A,R4
	MOV  	R7,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	R6,A
	MOV  	A,key?545+02H
	ADD  	A,R7
	MOV  	R1,A
	MOV  	A,key?545+01H
	ADDC 	A,R6
	MOV  	R2,A
	LCALL	?C?CLDPTR
	CLR  	C
	RRC  	A
	LCALL	?C?CSTPTR
;             if (temp > 1032) //1120us
			; SOURCE LINE # 113
	SETB 	C
	MOV  	A,temp?546+01H
	SUBB 	A,#08H
	MOV  	A,temp?546
	SUBB 	A,#04H
	JC   	?C0018
;                 key[i] |= 0x80;
			; SOURCE LINE # 114
	MOV  	R3,key?545
	MOV  	A,R4
	MOV  	R7,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	R6,A
	MOV  	A,key?545+02H
	ADD  	A,R7
	MOV  	R1,A
	MOV  	A,key?545+01H
	ADDC 	A,R6
	MOV  	R2,A
	LCALL	?C?CLDPTR
	ORL  	A,#080H
	LCALL	?C?CSTPTR
;         }
			; SOURCE LINE # 115
?C0018:
	INC  	j?548
	CLR  	C
	MOV  	A,j?548
	XRL  	A,#080H
	SUBB 	A,#088H
	JNC  	$ + 5H
	LJMP 	?C0016
;     }
			; SOURCE LINE # 116
?C0015:
	INC  	R4
	MOV  	A,R4
	XRL  	A,#04H
	JZ   	$ + 5H
	LJMP 	?C0013
?C0014:
; 
;     return 1;
			; SOURCE LINE # 118
	SETB 	C
; }
			; SOURCE LINE # 119
?C0012:
	RET  	
; END OF _nec_decode

; 
; #ifdef CONFIG_RC3_CODE
; static bit rc5_decode(unsigned char *key)
; {
;     unsigned int temp, c = 0;
;     bit state = 1;
;     char i = 0, j;
; 
;     while (1) { //13 bit
;         temp = Ir_Get_High();
;         test[2] = temp;
;         if ((temp < 300) || (temp > 900)) //200~800us
;             goto err;
; 
;         if (temp > 600) {
;             state = !state;
;             i++;
;         }
;         c |= state;
;         c <<= 1;
;         i++;
; 
;         temp = Ir_Get_Low();
;         test[3] = temp;
;         if ((temp < 300) || (temp > 900)) //200~800us
;             goto err;
; 
;         if (temp > 600) {
;             state = !state;
;             i++;
;         }
;         c |= state;
;         c <<= 1;
;         i++;
;     }
; 
; err:
;     return 1;
; }
; #endif
; 
; bit ir_rcv(unsigned char *key)

	RSEG  ?PR?_ir_rcv?IR
_ir_rcv:
	USING	0
			; SOURCE LINE # 161
	MOV  	key?649,R3
	MOV  	key?649+01H,R2
	MOV  	key?649+02H,R1
; {
			; SOURCE LINE # 162
;     unsigned int temp;
;     bit ret = 0;
			; SOURCE LINE # 164
	CLR  	ret?651
;     char i,j;
; 
;     if (!ir_rcv_int) {
			; SOURCE LINE # 167
	JB   	ir_rcv_int,?C0024
;         return 0;
			; SOURCE LINE # 168
	CLR  	C
	RET  	
;     }
			; SOURCE LINE # 169
?C0024:
; 
;     ir_rcv_t0_timer_cfg();
			; SOURCE LINE # 171
	LCALL	ir_rcv_t0_timer_cfg
; 
;     temp = Ir_Get_Low();
			; SOURCE LINE # 173
	LCALL	Ir_Get_Low
;---- Variable 'temp?650' assigned to Register 'R6/R7' ----
;     if (temp > 3000 && temp < 8755) {
			; SOURCE LINE # 174
	SETB 	C
	MOV  	A,R7
	SUBB 	A,#0B8H
	MOV  	A,R6
	SUBB 	A,#0BH
	JC   	?C0026
	MOV  	A,R7
	SUBB 	A,#033H
	MOV  	A,R6
	SUBB 	A,#022H
	JNC  	?C0026
;         ret = nec_decode(key);
			; SOURCE LINE # 175
	MOV  	R3,key?649
	MOV  	R2,key?649+01H
	MOV  	R1,key?649+02H
	LCALL	_nec_decode
	MOV  	ret?651,C
;     }
			; SOURCE LINE # 176
?C0026:
; #ifdef CONFIG_RC3_CODE
;     else if (temp <= 3000) {
;         ret = rc5_decode(key);
;     }
; #endif
; 
;     ir_rcv_int = 0;
			; SOURCE LINE # 183
	CLR  	ir_rcv_int
;     Timer1_InterruptEnable();
			; SOURCE LINE # 184
	SETB 	ET1
; 
;     return ret;
			; SOURCE LINE # 186
	MOV  	C,ret?651
; }
			; SOURCE LINE # 187
?C0025:
	RET  	
; END OF _ir_rcv

; 
; void ir_rcv_init(void)

	RSEG  ?PR?ir_rcv_init?IR
ir_rcv_init:
	USING	0
			; SOURCE LINE # 189
; {
			; SOURCE LINE # 190
;     ir_rcv_t1_timer_cfg(ENABLE);
			; SOURCE LINE # 191
	SETB 	?ir_rcv_t1_timer_cfg?BIT
	LCALL	ir_rcv_t1_timer_cfg
;     ir_rcv_int = 0;
			; SOURCE LINE # 192
	CLR  	ir_rcv_int
; }
			; SOURCE LINE # 193
	RET  	
; END OF ir_rcv_init

; 
; void ir_rcv_deinit(void)

	RSEG  ?PR?ir_rcv_deinit?IR
ir_rcv_deinit:
	USING	0
			; SOURCE LINE # 195
; {
			; SOURCE LINE # 196
;     ir_rcv_t1_timer_cfg(DISABLE);
			; SOURCE LINE # 197
	CLR  	?ir_rcv_t1_timer_cfg?BIT
	LCALL	ir_rcv_t1_timer_cfg
;     ir_rcv_int = 0;
			; SOURCE LINE # 198
	CLR  	ir_rcv_int
; }
			; SOURCE LINE # 199
	RET  	
; END OF ir_rcv_deinit

; 
; 
; 
; static bit ir_out;
; static unsigned char ir_cnt;
; 
; void ir_send_isr(void)

	RSEG  ?PR?ir_send_isr?IR
ir_send_isr:
			; SOURCE LINE # 206
; {
			; SOURCE LINE # 207
;     if (ir_out) {
			; SOURCE LINE # 208
	JNB  	ir_out,?C0029
;         IR_SEND = !IR_SEND;
			; SOURCE LINE # 209
	CPL  	P34
;     }
			; SOURCE LINE # 210
?C0029:
; 
;     if (ir_cnt) {
			; SOURCE LINE # 212
	MOV  	A,ir_cnt
	JZ   	?C0031
;         ir_cnt--;
			; SOURCE LINE # 213
	DEC  	ir_cnt
;     }
			; SOURCE LINE # 214
; }
			; SOURCE LINE # 215
?C0031:
	RET  	
; END OF ir_send_isr

; 
; void ir_send_t0_timer_cfg(bit enable)

	RSEG  ?PR?ir_send_t0_timer_cfg?IR
ir_send_t0_timer_cfg:
	USING	0
			; SOURCE LINE # 217
; {
			; SOURCE LINE # 218
;     TIM_InitTypeDef tim_type;
; 
;     tim_type.TIM_Mode = TIM_16BitAutoReload;
			; SOURCE LINE # 221
	CLR  	A
	MOV  	tim_type?1055,A
;     tim_type.TIM_Polity = 1;
			; SOURCE LINE # 222
	MOV  	tim_type?1055+01H,#01H
;     tim_type.TIM_Interrupt = enable;
			; SOURCE LINE # 223
	MOV  	C,enable?1054
	RLC  	A
	MOV  	R7,A
	MOV  	tim_type?1055+02H,A
;     tim_type.TIM_ClkSource = TIM_CLOCK_12T;
			; SOURCE LINE # 224
	MOV  	tim_type?1055+03H,#01H
;     tim_type.TIM_ClkOut = DISABLE;
			; SOURCE LINE # 225
	CLR  	A
	MOV  	tim_type?1055+04H,A
;     tim_type.TIM_Value = 65536 - MAIN_Fosc / (38000 * 2);
			; SOURCE LINE # 226
	MOV  	tim_type?1055+05H,#0FFH
	MOV  	tim_type?1055+06H,#06FH
;     tim_type.TIM_Run = enable;
			; SOURCE LINE # 227
	MOV  	tim_type?1055+07H,R7
;     tim_type.TIM_Isr = ir_send_isr;
			; SOURCE LINE # 228
	MOV  	tim_type?1055+08H,#0FFH
	MOV  	tim_type?1055+09H,#HIGH (ir_send_isr)
	MOV  	tim_type?1055+0AH,#LOW (ir_send_isr)
;     Timer_Inilize(Timer0, &tim_type);
			; SOURCE LINE # 229
	MOV  	R3,A
	MOV  	R2,#HIGH (tim_type?1055)
	MOV  	R1,#LOW (tim_type?1055)
	MOV  	R7,A
	LJMP 	_Timer_Inilize
; END OF ir_send_t0_timer_cfg

; }
; 
; 
; #pragma asm
          // 1 cycle = 1/38K = 291 clock = 145 + 146
  CYCLE:  SETB    IR_SEND         // 4
          NOP                     // 1
          MOV     R0,     #33     // 2
          DJNZ    R0,     $       // 4 * 33 = 132
  
          CLR     IR_SEND         // 4
          MOV     R0,     #33     // 2
          DJNZ    R0,     $       // 4 * 33 = 132
          RET                     // 4
  
          // 0 bit = cycle(560us) + 0(560us) = cycle(21 cycle) + 0(6193.152 = 4*12*129 clock)
  IRS0:   MOV     R1,     #21     // 2
  CC1:    LCALL   CYCLE           // 6
          DJNZ    R1,     CC1     // 4
  
          MOV     R2,     #12    // 2
  CC2:    MOV     R1,     #129    // 2
          DJNZ    R1,     $       // 4
          DJNZ    R2,     CC2     // 4
          RET
  
          // 1 bit = cycle(560us) + 0(1690us) = cycle(21 cycle) + 0(18690.048 = 4*32*146 clock)
  IRS1:   MOV     R1,     #21     // 2
  CC3:    LCALL   CYCLE           // 6
          DJNZ    R1,     CC3     // 4
  
          MOV     R2,     #32     // 2
  CC4:    MOV     R1,     #146    // 2
          DJNZ    R1,     $       // 4
          DJNZ    R2,     CC4     // 4
          RET
; #pragma endasm
; 
; bit ir_send(unsigned char *key)

	RSEG  ?PR?_ir_send?IR
_ir_send:
			; SOURCE LINE # 268
	MOV  	key?1156,R3
	MOV  	key?1156+01H,R2
	MOV  	key?1156+02H,R1
; {
			; SOURCE LINE # 269
; #pragma asm
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R0
	  MOV     ACC,    R0
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R1
	  MOV     ACC,    R1
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R2
	  MOV     ACC,    R2
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R3
	  MOV     ACC,    R3
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R4
	  MOV     ACC,    R4
;         PUSH    ACC
	  PUSH    ACC
;         MOV     ACC,    R5
	  MOV     ACC,    R5
;         PUSH    ACC
	  PUSH    ACC
; 
	  
;         MOV     A,      R1
	  MOV     A,      R1
;         MOV     R5,     A
	  MOV     R5,     A
; 
	  
;         // send start code: 0(9000us = 342 cycle = 171 + 171) + 1(4500us = 49767 clock = 4 * 49 * 255)
	  
;         MOV     R1,     #170    // 2
	  MOV     R1,     #170     
;         MOV     R2,     #170    // 2
	  MOV     R2,     #170     
; C1:     LCALL   CYCLE           // 6
	  C1:     LCALL   CYCLE            
;         DJNZ    R1,     C1      // 4
	  DJNZ    R1,     C1       
; C2:     LCALL   CYCLE           // 6
	  C2:     LCALL   CYCLE            
;         DJNZ    R2,     C2      // 4
	  DJNZ    R2,     C2       
; 
	  
;         MOV     R2,     #49     // 2
	  MOV     R2,     #49      
; C3:     MOV     R1,     #255    // 2
	  C3:     MOV     R1,     #255     
;         DJNZ    R1,     $       // 4
	  DJNZ    R1,     $        
;         DJNZ    R2,     C3      // 4
	  DJNZ    R2,     C3       
; 
	  
;         // send byte
	  
;         MOV     R4,     #4      //
	  MOV     R4,     #4       
; C7:     MOV     A,      R5
	  C7:     MOV     A,      R5
;         MOV     R0,     A
	  MOV     R0,     A
;         MOV     A,      @R0     //
	  MOV     A,      @R0      
;         INC     R5
	  INC     R5
;         MOV     R3,     #8      //
	  MOV     R3,     #8       
; C6:     RRC     A               // 1
	  C6:     RRC     A                
;         JC      C4              // 3
	  JC      C4               
;         LCALL   IRS0            // 6
	  LCALL   IRS0             
;         LJMP    C5
	  LJMP    C5
; C4:     LCALL   IRS1            // 6
	  C4:     LCALL   IRS1             
; C5:     DJNZ    R3,     C6      // 4
	  C5:     DJNZ    R3,     C6       
;         DJNZ    R4,     C7      // 4
	  DJNZ    R4,     C7       
; 
	  
;         MOV     R0,     #0FFH
	  MOV     R0,     #0FFH
;         DJNZ    R0,     $
	  DJNZ    R0,     $
; 
	  
;         POP     ACC
	  POP     ACC
;         MOV     R5,     ACC
	  MOV     R5,     ACC
;         POP     ACC
	  POP     ACC
;         MOV     R4,     ACC
	  MOV     R4,     ACC
;         POP     ACC
	  POP     ACC
;         MOV     R3,     ACC
	  MOV     R3,     ACC
;         POP     ACC
	  POP     ACC
;         MOV     R2,     ACC
	  MOV     R2,     ACC
;         POP     ACC
	  POP     ACC
;         MOV     R1,     ACC
	  MOV     R1,     ACC
;         POP     ACC
	  POP     ACC
;         MOV     R0,     ACC
	  MOV     R0,     ACC
;         POP     ACC
	  POP     ACC
; #pragma endasm
; 
;     return 0;
			; SOURCE LINE # 334
	CLR  	C
; }
			; SOURCE LINE # 335
?C0033:
	RET  	
; END OF _ir_send

; 
; void ir_send_init(void)

	RSEG  ?PR?ir_send_init?IR
ir_send_init:
	USING	0
			; SOURCE LINE # 337
; {
			; SOURCE LINE # 338
;     IR_SEND = 1;
			; SOURCE LINE # 339
	SETB 	P34
;     ir_out = 0;
			; SOURCE LINE # 340
	CLR  	ir_out
;     ir_cnt = 0;
			; SOURCE LINE # 341
	CLR  	A
	MOV  	ir_cnt,A
;     ir_send_t0_timer_cfg(ENABLE);
			; SOURCE LINE # 342
	SETB 	?ir_send_t0_timer_cfg?BIT
	LJMP 	ir_send_t0_timer_cfg
; END OF ir_send_init

; }
; 
; void ir_send_deinit(void)

	RSEG  ?PR?ir_send_deinit?IR
ir_send_deinit:
	USING	0
			; SOURCE LINE # 345
; {
			; SOURCE LINE # 346
;     ir_send_t0_timer_cfg(DISABLE);
			; SOURCE LINE # 347
	CLR  	?ir_send_t0_timer_cfg?BIT
	LCALL	ir_send_t0_timer_cfg
;     IR_SEND = 1;
			; SOURCE LINE # 348
	SETB 	P34
;     ir_out = 0;
			; SOURCE LINE # 349
	CLR  	ir_out
;     ir_cnt = 0;
			; SOURCE LINE # 350
	CLR  	A
	MOV  	ir_cnt,A
; }
			; SOURCE LINE # 351
	RET  	
; END OF ir_send_deinit

; 
; 
; bit check_ir_loop(void)

	RSEG  ?PR?check_ir_loop?IR
check_ir_loop:
	USING	0
			; SOURCE LINE # 354
; {
			; SOURCE LINE # 355
;     unsigned char n = 2;
			; SOURCE LINE # 356
	MOV  	n?1457,#02H
; 
;     ir_send_init();
			; SOURCE LINE # 358
	LCALL	ir_send_init
?C0038:
; 
;     do {
			; SOURCE LINE # 360
;         if (ir_rcv_int) {
			; SOURCE LINE # 361
	JB   	ir_rcv_int,?C0037
;             break;
			; SOURCE LINE # 362
;         }
			; SOURCE LINE # 363
?C0039:
;         ir_cnt = 10;
			; SOURCE LINE # 364
	MOV  	ir_cnt,#0AH
;         ir_out = 1;
			; SOURCE LINE # 365
	SETB 	ir_out
?C0040:
;         while (ir_cnt);
			; SOURCE LINE # 366
	MOV  	A,ir_cnt
	JNZ  	?C0040
?C0041:
;         ir_out = 0;
			; SOURCE LINE # 367
	CLR  	ir_out
; 
;         if (!ir_rcv_int) {
			; SOURCE LINE # 369
	JNB  	ir_rcv_int,?C0037
;             break;
			; SOURCE LINE # 370
;         }
			; SOURCE LINE # 371
?C0042:
;         ir_rcv_int = 0;
			; SOURCE LINE # 372
	CLR  	ir_rcv_int
;         Timer1_InterruptEnable();
			; SOURCE LINE # 373
	SETB 	ET1
; 
;         delay_ms(1);
			; SOURCE LINE # 375
	MOV  	R7,#01H
	MOV  	R6,#00H
	LCALL	_delay_ms
;     } while (--n);
			; SOURCE LINE # 376
	DJNZ 	n?1457,?C0038
?C0037:
; 
;     ir_send_deinit();
			; SOURCE LINE # 378
	LCALL	ir_send_deinit
; 
;     return (n == 0);
			; SOURCE LINE # 380
	MOV  	A,n?1457
	JNZ  	?C0043
	SETB 	C
	SJMP 	?C0044
?C0043:
	CLR  	C
?C0044:
; }
			; SOURCE LINE # 381
?C0045:
	RET  	
; END OF check_ir_loop

	END
