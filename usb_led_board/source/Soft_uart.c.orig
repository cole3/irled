
/*************	功能说明	**************

本文件为模拟串口发送程序, 一般为测试监控用.

串口参数:9600,8,n,1.

可以根据主时钟自动适应.

******************************************/

#include	"soft_uart.h"
#include 	"timer.h"

/***************************************************************************/


#define BaudRate		115200		//模拟串口波特率


static bit init;


#if (BaudRate == 115200)
#pragma asm
RXB     BIT     P3.0
TXB     BIT     P3.1
#pragma endasm

void uart_init(void)
{
    init = 1;
}

void uart_deinit(void)
{
    init = 0;
}

bit uart_send(unsigned char dat)
{
#pragma asm
    PUSH    ACC
    MOV     ACC,    R0
    PUSH    ACC
    MOV     ACC,    R1
    PUSH    ACC

    MOV     ACC,    R7
    MOV     R1,     #8

    // 115200 baud rate = 96 clock
    // send start bit
    CLR     TXB             // 4
    MOV     R0,     #22     // 2
    DJNZ    R0,     $       // 4 * 22 = 88
    NOP
    NOP

    // send byte
L1:
    RRC     A               // 1
    MOV     TXB,     C      // 4
    MOV     R0,     #21     // 2
    NOP                     // 1
    DJNZ    R0,     $       // 4 * 21 = 84
    DJNZ    R1,     L1      // 4

    // send stop bit
    SETB    TXB             // 4
    MOV     R0,     #22     // 2
    DJNZ    R0,     $       // 4 * 22 = 88
    NOP
    NOP

    MOV     R0,     #0FFH
    DJNZ    R0,     $

    POP     ACC
    MOV     R1,     ACC
    POP     ACC
    MOV     R0,     ACC
    POP     ACC
#pragma endasm

    return 1;
}

#else
#define Timer0_Reload	(65536 - MAIN_Fosc / BaudRate / 3)
#define D_RxBitLenth	9		//9: 8 + 1 stop
#define D_TxBitLenth	9		//9: 1 stop bit

sbit RXB = P3^0;                //define UART TX/RX port
sbit TXB = P3^1;

static unsigned char TBUF,RBUF;
static unsigned char TCNT,RCNT;	//发送和接收检测 计数器(3倍速率检测)
static unsigned char TBIT,RBIT;	//发送和接收的数据计数器
static unsigned char rcv_cnt, get_cnt;
static unsigned char buf[16];

static bit TING,RING;	//正在发送或接收一个字节

#define	RxBitLenth	9	//8个数据位+1个停止位
#define	TxBitLenth	9	//8个数据位+1个停止位


bit uart_rev(unsigned char *dat)
{
    if (!init)
    {
        return 0;
    }
    if (get_cnt != rcv_cnt)
    {
        *dat = buf[get_cnt++ & 0x0f];
        return 1;
    }
    return 0;
}

bit uart_send(unsigned char dat)
{
    if (!init)
    {
        return 0;
    }
    while (TING);
    TBUF = dat;
    TING = 1;
    return 1;
}

void uart_isr(void)
{
    if (RING)
    {
        if (--RCNT == 0)				  //接收数据以定时器的1/3来接收
        {
            RCNT = 3;                   //重置接收计数器  接收数据以定时器的1/3来接收	reset send baudrate counter
            if (--RBIT == 0)			  //接收完一帧数据
            {
                RING = 0;               //停止接收			stop receive
                buf[rcv_cnt++ & 0x0f] = RBUF;
            }
            else
            {
                RBUF >>= 1;			  //把接收的单b数据 暂存到 RDAT(接收缓冲)
                if (RXB) RBUF |= 0x80;  //shift RX data to RX buffer
            }
        }
    }
    else if (!RXB)		//判断是不是开始位 RXB=0;
    {
        RING = 1;       //如果是则设置开始接收标志位 	set start receive flag
        RCNT = 4;       //初始化接收波特率计数器       	initial receive baudrate counter
        RBIT = RxBitLenth;       //初始化接收的数据位数(8个数据位+1个停止位)    initial receive bit number (8 data bits + 1 stop bit)
    }

    if (TING)			//发送开始标志位   judge whether sending
    {
        if (--TCNT == 0)			//发送数据以定时器的1/3来发送
        {
            TCNT = 3;				//重置发送计数器   reset send baudrate counter
            if (TBIT == 0)			//发送计数器为0 表明单字节发送还没开始
            {
                TXB = 0;			//发送开始位     					send start bit
                TBIT = TxBitLenth;	//发送数据位数 (8数据位+1停止位)	initial send bit number (8 data bits + 1 stop bit)
            }
            else					//发送计数器为非0 正在发送数据
            {
                if (--TBIT == 0)	//发送计数器减为0 表明单字节发送结束
                {
                    TXB = 1;		//送停止位数据
                    TING = 0;		//发送停止位    			stop send
                }
                else
                {
                    TBUF >>= 1;		//把最低位送到 CY(益处标志位) shift data to CY
                    TXB = CY;		//发送单b数据				write CY to TX port
                }
            }
        }
    }
}

void uart_init(void)
{
    TIM_InitTypeDef tim_type;

    if (init) {
        return;
    }

    tim_type.TIM_Mode = TIM_16BitAutoReload;
    tim_type.TIM_Polity = 1;
    tim_type.TIM_Interrupt = ENABLE;
    tim_type.TIM_ClkSource = TIM_CLOCK_1T;
    tim_type.TIM_ClkOut = DISABLE;
    tim_type.TIM_Value = Timer0_Reload;
    tim_type.TIM_Run = ENABLE;
    tim_type.TIM_Isr = uart_isr;
    Timer_Inilize(Timer0, &tim_type);

    TING = 0;
    RING = 0;
    TCNT = 3;
    RCNT = 0;
    init = 1;
}

void uart_deinit(void)
{
    init = 0;
    while (TING);
    Timer0_Stop();
    Timer0_InterruptDisable();
}
#endif


void print_str(unsigned char code *str)
{
    bit state = init;

    uart_init();

    while (*str) {
        uart_send(*str++);
    }

    if (!state) {
        uart_deinit();
    }
}

#define HEX2CHAR(h)     ((h >= 10) ? (h - 10 + 'A'): (h + '0'))
#define DEC2CHAR(d)     (d + '0')


void print_hex(unsigned char hex)
{
    bit state = init;

    uart_init();

    uart_send(HEX2CHAR(hex / 16));
    uart_send(HEX2CHAR(hex % 16));

    if (!state) {
        uart_deinit();
    }
}

void print_dec(unsigned char dec)
{
    bit state = init;

    uart_init();

    uart_send(DEC2CHAR(dec / 100));
    uart_send(DEC2CHAR(dec / 10 % 10));
    uart_send(DEC2CHAR(dec % 10));

    if (!state) {
        uart_deinit();
    }
}

